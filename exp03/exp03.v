
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module exp03(

	//////////// KEY //////////
	input 		     [3:0]		KEY,// [2:0]ALUctr

	//////////// SW //////////
	input 		     [9:0]		SW,// [3:0]b [7:4]a

	//////////// LED //////////
	output		     [9:0]		LEDR // [3:0]F [4]cf [5]zero [6]of
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
reg [3:0] F;
reg cf;
reg zero;
reg of;
reg [3:0] a;
reg [3:0] b;
reg [4:0] f;

always @ (*) begin
	b = SW[3:0];
	a = SW[7:4];
	if(KEY[2:0] == 3'b000 || KEY[2:0] == 3'b001) begin
		if(KEY[0] == 0) begin
			f = a + b;
			cf = f[4];
			if (a[3] == b[3]) begin
				if (b[3] == f[3])
					of = 0;
				else 
					of = 1;
			end
			else
				of = 0;
		end
		else begin
			f = a - b;
			cf = a < b;
			if (a[3] != b[3]) begin
				if (b[3] != f[3])
					of = 0;
				else 
					of = 1;
			end
			else
				of = 0;
		end
		zero = (f[3:0] == 0) ? 1 : 0;
		F = f;
	end
	else begin
		cf = 0;
		of = 0;
		case(KEY[2:0])
			3'b010:begin
				a = ~a;
				F = a;
			end
			3'b011:
				F = a & b;
			3'b100:
				F = a | b;
			3'b101 :
				F = a ^ b;
			3'b110 : begin
				if(a[3] == b[3])
					F = a < b;

				if(a[3] != b[3]) 
					F = a > b;
			end
			3'b111 :
				F = a == b;
		endcase
		zero = F == 0 ? 1 : 0;
	end
end
assign LEDR[3:0] = F;
assign LEDR[4] = cf;
assign LEDR[5] = zero;
assign LEDR[6] = of;
assign LEDR[9:7] = 3'b000;

//=======================================================
//  Structural coding
//=======================================================



endmodule
