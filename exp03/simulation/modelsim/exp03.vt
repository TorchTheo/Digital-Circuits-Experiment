`timescale 1 ps/ 1 ps
module exp03_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg [3:0] KEY;
reg [9:0] SW;// [3:0]b [7:4]a
// wires                                               
wire [9:0]  LEDR;// [3:0]F [4]cf [5]zero [6]of

// assign statements (if any)                          
exp03 i1 (
// port map - connection between master ports and signals/registers   
	.KEY(KEY),
	.LEDR(LEDR),
	.SW(SW)
);
initial                                                
begin
	KEY[2:0] = 3'b000; SW[7:4] = 4'b0000; SW[3:0] = 4'b0000; #50;
	KEY[2:0] = 3'b000; SW[7:4] = 4'b0000; SW[3:0] = 4'b0001; #50;
	KEY[2:0] = 3'b000; SW[7:4] = 4'b0101; SW[3:0] = 4'b0001; #50;
	KEY[2:0] = 3'b000; SW[7:4] = 4'b1100; SW[3:0] = 4'b0011; #50;
	KEY[2:0] = 3'b000; SW[7:4] = 4'b1110; SW[3:0] = 4'b0101; #50;
	KEY[2:0] = 3'b000; SW[7:4] = 4'b1111; SW[3:0] = 4'b0001; #50;
	KEY[2:0] = 3'b000; SW[7:4] = 4'b0000; SW[3:0] = 4'b0000; #50;
	KEY[2:0] = 3'b000; SW[7:4] = 4'b0111; SW[3:0] = 4'b0001; #50;
	
	KEY[2:0] = 3'b001; SW[7:4] = 4'b0000; SW[3:0] = 4'b0001; #50;
	KEY[2:0] = 3'b001; SW[7:4] = 4'b0101; SW[3:0] = 4'b0001; #50;
	KEY[2:0] = 3'b001; SW[7:4] = 4'b1100; SW[3:0] = 4'b0011; #50;
	KEY[2:0] = 3'b001; SW[7:4] = 4'b1110; SW[3:0] = 4'b1101; #50;
	KEY[2:0] = 3'b001; SW[7:4] = 4'b0000; SW[3:0] = 4'b0000; #50;
	KEY[2:0] = 3'b001; SW[7:4] = 4'b0010; SW[3:0] = 4'b0010; #50;
	
	KEY[2:0] = 3'b010; SW[7:4] = 4'b0000; SW[3:0] = 4'b1010; #50;
	KEY[2:0] = 3'b010; SW[7:4] = 4'b0000; SW[3:0] = 4'b1110; #50;
	KEY[2:0] = 3'b010; SW[7:4] = 4'b1001; SW[3:0] = 4'b1010; #50;
	
	KEY[2:0] = 3'b011; SW[7:4] = 4'b1111; SW[3:0] = 4'b0001; #50;
	KEY[2:0] = 3'b011; SW[7:4] = 4'b1011; SW[3:0] = 4'b1011; #50;
	KEY[2:0] = 3'b011; SW[7:4] = 4'b1001; SW[3:0] = 4'b1101; #50;
	
	KEY[2:0] = 3'b100; SW[7:4] = 4'b0000; SW[3:0] = 4'b1001; #50;
	KEY[2:0] = 3'b100; SW[7:4] = 4'b0110; SW[3:0] = 4'b1001; #50;
	KEY[2:0] = 3'b100; SW[7:4] = 4'b1100; SW[3:0] = 4'b0001; #50;
	
	KEY[2:0] = 3'b101; SW[7:4] = 4'b0000; SW[3:0] = 4'b1001; #50;
	KEY[2:0] = 3'b101; SW[7:4] = 4'b0110; SW[3:0] = 4'b1001; #50;
	KEY[2:0] = 3'b101; SW[7:4] = 4'b1100; SW[3:0] = 4'b0001; #50;
	
	KEY[2:0] = 3'b110; SW[7:4] = 4'b0000; SW[3:0] = 4'b1001; #50;
	KEY[2:0] = 3'b110; SW[7:4] = 4'b0110; SW[3:0] = 4'b1001; #50;
	KEY[2:0] = 3'b110; SW[7:4] = 4'b1110; SW[3:0] = 4'b1001; #50;
	KEY[2:0] = 3'b110; SW[7:4] = 4'b1100; SW[3:0] = 4'b0001; #50;
	KEY[2:0] = 3'b110; SW[7:4] = 4'b1100; SW[3:0] = 4'b1100; #50;
	
	KEY[2:0] = 3'b111; SW[7:4] = 4'b0000; SW[3:0] = 4'b1001; #50;
	KEY[2:0] = 3'b111; SW[7:4] = 4'b0110; SW[3:0] = 4'b1001; #50;
	KEY[2:0] = 3'b111; SW[7:4] = 4'b1100; SW[3:0] = 4'b0001; #50;
	KEY[2:0] = 3'b111; SW[7:4] = 4'b1100; SW[3:0] = 4'b1100; #50;
end                                                    
                                              
endmodule

